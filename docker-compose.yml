services:
  web:
    image: ${DOCKER_IMAGE}
    volumes:
      - static_volume:/home/app/staticfiles
      - writable_volume:/home/app/  writable
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
    restart: unless-stopped
  postgres:
    image: postgres:15
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - postgres_dumps:/postgres_dumps
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}
    restart: unless-stopped
  redis:
    image: redis:latest
    restart: unless-stopped
  nginx:
    image: nginx:latest
    volumes:
      - static_volume:/home/app/staticfiles
      - writable_volume:/home/app/writable
      - ./nginx.conf.template:/etc/nginx/templates/default.conf.template
    env_file:
      - ./.env
    ports:
      - 80:80
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_dumps:
  static_volume:
  writable_volume:
